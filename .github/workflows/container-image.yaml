name: Publish Container Image


on:
  workflow_call:
    inputs:
      project-name:
        required: true
        type: string
      microservice-name:
        required: true
        type: string

# on:
#   push:
#     branches:
#       - main
#       - rc
#       - dev
#       - feature/*

env:
  IS_RELEASE: ${{ github.ref == 'refs/heads/master' || github.ref == 'refs/heads/main' }}
  IS_RC: ${{ github.ref == 'refs/heads/rc' }}
  IS_BETA: ${{ github.ref == 'refs/heads/dev' }}
  SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
  DOCKER_HUB_USERNAME: ${{ secrets.DOCKER_HUB_USERNAME }}
  DOCKER_HUB_ACCESS_TOKEN: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

jobs:
  build:
    name: Build .Net
    runs-on: ubuntu-latest
    environment: Dev
    permissions:
      contents: write
      packages: write
      repository-projects: write

    steps:
    - name: Checkout
      id: checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0 

    - name: Setup .NET SDK ðŸš§
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 9.0.x

    - name: SemVer 
      id: git-semver
      uses: codedesignplus/semver-git-version@v0.1.10
      with:
        folder: ${{github.workspace}}
        release-branch: 'main'
        release-candidate-branch: 'rc'
        beta-branch: 'dev'
        major-identifier: 'breaking'
        minor-identifier: 'feat' 
        prefix: 'v'
        dir-affected: ./
        previous-version: true
        new-version: true

    - name: Print Output
      id: output
      run: | 
        echo Previous Tag "${{ steps.git-semver.outputs.previous-tag }}"
        echo Previous Version "${{ steps.git-semver.outputs.previous-version }}"
        echo Previous Version Prefix "${{ steps.git-semver.outputs.previous-version-prefix }}"
        echo New Version "${{steps.git-semver.outputs.new-version}}"
        echo New Version Prefix "${{steps.git-semver.outputs.new-version-prefix}}"

    - name: Check if Projects Exist
      id: check-projects
      run: |
        if [ -f "${{ github.workspace }}/src/entrypoints/${{inputs.project-name}}.gRpc/${{inputs.project-name}}.gRpc.csproj" ]; then
          echo "GRPC_EXISTS=true" >> $GITHUB_ENV
          echo "GRPC_EXISTS=true"
        else
          echo "GRPC_EXISTS=false" >> $GITHUB_ENV
          echo "GRPC_EXISTS=false"
        fi
        if [ -f "${{ github.workspace }}/src/entrypoints/${{inputs.project-name}}.AsyncWorker/${{inputs.project-name}}.AsyncWorker.csproj" ]; then
          echo "WORKER_EXISTS=true" >> $GITHUB_ENV
          echo "WORKER_EXISTS=true"
        else
          echo "WORKER_EXISTS=false" >> $GITHUB_ENV
          \echo "WORKER_EXISTS=false"
        fi

    - name: Set up Docker
      uses: docker/setup-buildx-action@v1

    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_HUB_USERNAME }}
        password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

    - name: Build & Push | Docker Hub - Rest API 
      uses: docker/build-push-action@v6
      with:
        context: .
        file: "${{ github.workspace }}/src/entrypoints/${{inputs.project-name}}.Rest/Dockerfile"
        push: true
        tags: ${{ secrets.DOCKER_HUB_USERNAME }}/${{inputs.microservice-name}}-rest:${{ steps.git-semver.outputs.new-version-prefix }}

    - name: Build & Push | Docker Hub - Worker
      uses: docker/build-push-action@v6
      if: env.WORKER_EXISTS == 'true'
      with:
        context: .
        file: "${{ github.workspace }}/src/entrypoints/${{inputs.project-name}}.AsyncWorker/Dockerfile"
        push: true
        tags: ${{ secrets.DOCKER_HUB_USERNAME }}/${{inputs.microservice-name}}-worker:${{ steps.git-semver.outputs.new-version-prefix }}

    - name: Build & Push | Docker Hub - gRpc
      uses: docker/build-push-action@v6
      if: env.GRPC_EXISTS == 'true'
      with:
        context: .
        file: "${{ github.workspace }}/src/entrypoints/${{inputs.project-name}}.gRpc/Dockerfile"
        push: true
        tags: ${{ secrets.DOCKER_HUB_USERNAME }}/${{inputs.microservice-name}}-grpc:${{ steps.git-semver.outputs.new-version-prefix }}
        


    - name: Log in to GitHub Packages
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Build & Push | GitHub Packages - Rest API
      uses: docker/build-push-action@v6
      with:
        context: .
        file: "${{ github.workspace }}/src/entrypoints/${{inputs.project-name}}.Rest/Dockerfile"
        push: true
        tags: ghcr.io/${{ github.repository_owner }}/${{inputs.microservice-name}}-rest:${{ steps.git-semver.outputs.new-version-prefix }}
    
    - name: Build & Push | GitHub Packages - Worker
      uses: docker/build-push-action@v6
      if: env.WORKER_EXISTS == 'true'
      with:
        context: .
        file: "${{ github.workspace }}/src/entrypoints/${{inputs.project-name}}.AsyncWorker/Dockerfile"
        push: true
        tags: ghcr.io/${{ github.repository_owner }}/${{inputs.microservice-name}}-worker:${{ steps.git-semver.outputs.new-version-prefix }}
    
    - name: Build & Push | GitHub Packages - gRpc
      uses: docker/build-push-action@v6
      if: env.GRPC_EXISTS == 'true'
      with:
        context: .
        file: "${{ github.workspace }}/src/entrypoints/${{inputs.project-name}}.gRpc/Dockerfile"
        push: true
        tags: ghcr.io/${{ github.repository_owner }}/${{inputs.microservice-name}}-grpc:${{ steps.git-semver.outputs.new-version-prefix }}